name: Build FinceptTerminal

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            os_name: 'macOS'
            arch: 'arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            os_name: 'macOS'
            arch: 'x64'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            os_name: 'Linux'
            arch: 'x64'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            os_name: 'Windows'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}

    defaults:
      run:
        working-directory: ./fincept-terminal-desktop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libwebkit2gtk-4.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libjavascriptcoregtk-4.0-dev \
            libsoup-3.0-dev \
            libsoup2.4-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-22.04' && 'x86_64-unknown-linux-gnu' || 'x86_64-pc-windows-msvc' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './fincept-terminal-desktop/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: './fincept-terminal-desktop/package-lock.json'

      - name: Install frontend dependencies
        run: npm install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './fincept-terminal-desktop'
          args: ${{ matrix.args }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: finceptterminal-${{ matrix.os_name }}-${{ matrix.arch }}
          path: |
            fincept-terminal-desktop/src-tauri/target/*/release/bundle/
            !fincept-terminal-desktop/src-tauri/target/*/release/bundle/**/*.dSYM/
          retention-days: 30

  update-readme:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          if [ -f "fincept-terminal-desktop/src-tauri/Cargo.toml" ]; then
            VERSION=$(grep '^version = ' fincept-terminal-desktop/src-tauri/Cargo.toml | head -n1 | cut -d '"' -f2)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=1.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Create download section
        run: |
          RUN_ID="${{ github.run_id }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA=${COMMIT_SHA:0:7}
          VERSION="${{ steps.get_version.outputs.version }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          
          echo "## 📥 Download Latest Build" > download_section.md
          echo "" >> download_section.md
          echo "**Version:** \`v${VERSION}\` | **Commit:** \`${SHORT_SHA}\` | **Build:** [#${RUN_ID}](${REPO_URL}/actions/runs/${RUN_ID}) | **Updated:** ${CURRENT_DATE}" >> download_section.md
          echo "" >> download_section.md
          echo "| Platform | Architecture | Download |" >> download_section.md
          echo "|----------|-------------|----------|" >> download_section.md
          echo "| 🍎 **macOS** | Apple Silicon (ARM64) | [![Download](https://img.shields.io/badge/Download-macOS%20ARM64-blue?style=for-the-badge&logo=apple)](${REPO_URL}/actions/runs/${RUN_ID}/artifacts) |" >> download_section.md
          echo "| 🍎 **macOS** | Intel (x64) | [![Download](https://img.shields.io/badge/Download-macOS%20x64-blue?style=for-the-badge&logo=apple)](${REPO_URL}/actions/runs/${RUN_ID}/artifacts) |" >> download_section.md
          echo "| 🐧 **Linux** | x64 | [![Download](https://img.shields.io/badge/Download-Linux%20x64-green?style=for-the-badge&logo=linux)](${REPO_URL}/actions/runs/${RUN_ID}/artifacts) |" >> download_section.md
          echo "| 🪟 **Windows** | x64 | [![Download](https://img.shields.io/badge/Download-Windows%20x64-red?style=for-the-badge&logo=windows)](${REPO_URL}/actions/runs/${RUN_ID}/artifacts) |" >> download_section.md
          echo "" >> download_section.md
          echo "> **Note:** Click on the download buttons above to access the artifacts page, then download the specific build for your platform." >> download_section.md
          echo "" >> download_section.md
          echo "### 📋 Installation Instructions" >> download_section.md
          echo "" >> download_section.md
          echo "- **macOS**: Download the \`.dmg\` file, open it, and drag FinceptTerminal to Applications" >> download_section.md
          echo "- **Linux**: Download the \`.AppImage\` file, make it executable (\`chmod +x\`), and run" >> download_section.md
          echo "- **Windows**: Download the \`.msi\` file and run the installer" >> download_section.md
          echo "" >> download_section.md
          echo "---" >> download_section.md

      - name: Update README
        run: |
          README_PATH="fincept-terminal-desktop/README.md"
          if [ ! -f "$README_PATH" ]; then
            echo "Creating new README.md"
            mkdir -p fincept-terminal-desktop
            echo "# FinceptTerminal" > "$README_PATH"
            echo "" >> "$README_PATH"
          fi
          
          if grep -q "<!-- DOWNLOAD_SECTION_START -->" "$README_PATH" && grep -q "<!-- DOWNLOAD_SECTION_END -->" "$README_PATH"; then
            echo "Updating existing download section"
            awk '
              /<!-- DOWNLOAD_SECTION_START -->/ { 
                print $0
                print ""
                system("cat download_section.md")
                while (getline > 0 && !/<!-- DOWNLOAD_SECTION_END -->/) continue
                print "<!-- DOWNLOAD_SECTION_END -->"
                next
              }
              { print }
            ' "$README_PATH" > temp_readme.md
            mv temp_readme.md "$README_PATH"
          else
            echo "Adding new download section"
            if grep -q "^# " "$README_PATH"; then
              awk '
                /^# / && !inserted { 
                  print $0
                  print ""
                  print "<!-- DOWNLOAD_SECTION_START -->"
                  system("cat download_section.md")
                  print "<!-- DOWNLOAD_SECTION_END -->"
                  print ""
                  inserted = 1
                  next
                }
                { print }
              ' "$README_PATH" > temp_readme.md
              mv temp_readme.md "$README_PATH"
            else
              {
                echo "<!-- DOWNLOAD_SECTION_START -->"
                cat download_section.md
                echo "<!-- DOWNLOAD_SECTION_END -->"
                echo ""
                cat "$README_PATH"
              } > temp_readme.md
              mv temp_readme.md "$README_PATH"
            fi
          fi
          
          rm -f download_section.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          if git diff --quiet fincept-terminal-desktop/README.md; then
            echo "No changes to commit"
          else
            git add fincept-terminal-desktop/README.md
            git commit -m "🚀 Auto-update download links for build #${{ github.run_id }}"
            
            for i in {1..3}; do
              if git push; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push failed, attempt $i/3"
                if [ $i -lt 3 ]; then
                  echo "Pulling latest changes and retrying..."
                  git pull --rebase
                  sleep 5
                else
                  echo "Failed to push after 3 attempts"
                  exit 1
                fi
              fi
            done
          fi