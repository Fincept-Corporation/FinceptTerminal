name: Build FinceptTerminal

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            os_name: 'macOS'
            arch: 'arm64'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            os_name: 'macOS'
            arch: 'x64'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: '--target x86_64-unknown-linux-gnu'
            os_name: 'Linux'
            arch: 'x64'
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            os_name: 'Windows'
            arch: 'x64'
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}

    defaults:
      run:
        working-directory: ./fincept-terminal-desktop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libwebkit2gtk-4.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libjavascriptcoregtk-4.0-dev \
            libsoup-3.0-dev \
            libsoup2.4-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            libnss3-dev \
            libxss1 \
            libasound2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './fincept-terminal-desktop/src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: './fincept-terminal-desktop/package-lock.json'

      - name: Install frontend dependencies
        run: npm install

      - name: Disable code signing for CI builds
        run: |
          cd src-tauri
          # Backup original config
          cp tauri.conf.json tauri.conf.json.bak
          # Remove signing command using sed
          sed -i.tmp 's/"signCommand".*,//' tauri.conf.json
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './fincept-terminal-desktop'
          args: ${{ matrix.args }}

      - name: Prepare artifacts with proper naming
        id: prepare
        run: |
          mkdir -p ../release-artifacts
          
          # Get version for consistent naming
          if [ -f "src-tauri/Cargo.toml" ]; then
            VERSION=$(grep '^version = ' src-tauri/Cargo.toml | head -n1 | cut -d '"' -f2)
          else
            VERSION="1.0.0"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Find and rename artifacts based on platform
          if [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            # macOS builds
            if [[ "${{ matrix.arch }}" == "arm64" ]]; then
              SUFFIX="macOS-arm64"
            else
              SUFFIX="macOS-x64"
            fi
            
            find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" -exec cp {} ../release-artifacts/FinceptTerminal-v${VERSION}-${SUFFIX}.dmg \; 2>/dev/null && echo "✅ Found .dmg" || echo "❌ No .dmg found"
            
          elif [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            # Linux builds
            SUFFIX="Linux-x64"
            find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.AppImage" -exec cp {} ../release-artifacts/FinceptTerminal-v${VERSION}-${SUFFIX}.AppImage \; 2>/dev/null && echo "✅ Found .AppImage" || echo "❌ No .AppImage found"
            find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.deb" -exec cp {} ../release-artifacts/FinceptTerminal-v${VERSION}-${SUFFIX}.deb \; 2>/dev/null && echo "✅ Found .deb" || echo "❌ No .deb found"
            
          elif [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            # Windows builds
            SUFFIX="Windows-x64"
            find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.msi" -exec cp {} ../release-artifacts/FinceptTerminal-v${VERSION}-${SUFFIX}.msi \; 2>/dev/null && echo "✅ Found .msi" || echo "❌ No .msi found"
          fi
          
          # List what we found
          echo "=== Release Artifacts ==="
          ls -la ../release-artifacts/ || echo "No artifacts prepared"
          
          # Set output for later steps
          artifact_count=$(find ../release-artifacts -type f | wc -l)
          echo "artifact_count=$artifact_count" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload build artifacts
        if: steps.prepare.outputs.artifact_count > 0
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os_name }}-${{ matrix.arch }}
          path: release-artifacts/
          retention-days: 1  # Short retention since we'll create releases

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only create releases for manual triggers
    permissions:
      contents: write
      pull-requests: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Get version from Cargo.toml
        id: get_version
        run: |
          if [ -f "fincept-terminal-desktop/src-tauri/Cargo.toml" ]; then
            VERSION=$(grep '^version = ' fincept-terminal-desktop/src-tauri/Cargo.toml | head -n1 | cut -d '"' -f2)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "version=1.0.0" >> $GITHUB_OUTPUT
          fi
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
          
      - name: Organize release files
        id: organize
        run: |
          mkdir -p release-files
          
          # Move all files to release-files directory
          find all-artifacts -type f \( -name "*.dmg" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" \) -exec cp {} release-files/ \;
          
          echo "=== Release Files ==="
          ls -la release-files/
          
          # Check if we have files
          file_count=$(find release-files -type f | wc -l)
          echo "file_count=$file_count" >> $GITHUB_OUTPUT
          
          # Create file list for release notes
          echo "FILES_LIST<<EOF" >> $GITHUB_OUTPUT
          ls -1 release-files/ >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create/Update Release
        if: steps.organize.outputs.file_count > 0
        id: create_release
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG_NAME="v${VERSION}-build-${{ github.run_number }}"
          RELEASE_NAME="FinceptTerminal v${VERSION} (Build #${{ github.run_number }})"
          
          # Create release notes
          cat << EOF > release_notes.md
          # 🚀 FinceptTerminal v${VERSION}
          
          **Build #${{ github.run_number }}** - Built from commit \`${{ github.sha }}\`
          
          ## 📦 Downloads
          
          Choose the right version for your operating system:
          
          ### 🍎 macOS
          - **Apple Silicon (M1/M2/M3)**: Download \`FinceptTerminal-v${VERSION}-macOS-arm64.dmg\`
          - **Intel**: Download \`FinceptTerminal-v${VERSION}-macOS-x64.dmg\`
          
          ### 🐧 Linux
          - **AppImage (Universal)**: Download \`FinceptTerminal-v${VERSION}-Linux-x64.AppImage\`
          - **Debian/Ubuntu**: Download \`FinceptTerminal-v${VERSION}-Linux-x64.deb\`
          
          ### 🪟 Windows
          - **Windows Installer**: Download \`FinceptTerminal-v${VERSION}-Windows-x64.msi\`
          
          ## 📋 Installation Instructions
          
          - **macOS**: Open the .dmg file and drag FinceptTerminal to Applications
          - **Linux AppImage**: Make executable (\`chmod +x\`) and run
          - **Linux Debian**: Install with \`sudo dpkg -i filename.deb\`
          - **Windows**: Run the .msi installer
          
          ---
          
          **Files in this release:**
          \`\`\`
          ${{ steps.organize.outputs.FILES_LIST }}
          \`\`\`
          
          **Build Information:**
          - Commit: ${{ github.sha }}
          - Build Date: $(date -u +"%Y-%m-%d %H:%M UTC")
          - Workflow Run: [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
          
          # Create or update release
          gh release create "$TAG_NAME" \
            --title "$RELEASE_NAME" \
            --notes-file release_notes.md \
            --latest \
            release-files/* || \
          gh release upload "$TAG_NAME" release-files/* --clobber
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update README with direct download links
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG_NAME="${{ steps.create_release.outputs.tag_name }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          SHORT_SHA=${{ github.sha }}
          SHORT_SHA=${SHORT_SHA:0:7}
          
          cat << EOF > download_section.md
          ## 📥 Download Latest Build
          
          **Version:** \`v${VERSION}\` | **Commit:** \`${SHORT_SHA}\` | **Released:** ${CURRENT_DATE}
          
          ### 🎯 Direct Downloads - Click to Download Immediately!
          
          | Platform | Architecture | Direct Download |
          |----------|-------------|----------------|
          | 🍎 **macOS** | Apple Silicon (ARM64) | [⬇️ **Download .dmg**](${REPO_URL}/releases/download/${TAG_NAME}/FinceptTerminal-v${VERSION}-macOS-arm64.dmg) |
          | 🍎 **macOS** | Intel (x64) | [⬇️ **Download .dmg**](${REPO_URL}/releases/download/${TAG_NAME}/FinceptTerminal-v${VERSION}-macOS-x64.dmg) |
          | 🐧 **Linux** | x64 (AppImage) | [⬇️ **Download .AppImage**](${REPO_URL}/releases/download/${TAG_NAME}/FinceptTerminal-v${VERSION}-Linux-x64.AppImage) |
          | 🐧 **Linux** | x64 (Debian) | [⬇️ **Download .deb**](${REPO_URL}/releases/download/${TAG_NAME}/FinceptTerminal-v${VERSION}-Linux-x64.deb) |
          | 🪟 **Windows** | x64 | [⬇️ **Download .msi**](${REPO_URL}/releases/download/${TAG_NAME}/FinceptTerminal-v${VERSION}-Windows-x64.msi) |
          
          > ✨ **One-Click Downloads!** These links will start downloading immediately - no GitHub login required!

          ### 📊 Build Status & Info
          
          ![Build Status](https://github.com/${{ github.repository }}/actions/workflows/build.yml/badge.svg)
          ![Latest Release](https://img.shields.io/github/v/release/${{ github.repository }}?include_prereleases&label=Latest%20Build)
          ![Downloads](https://img.shields.io/github/downloads/${{ github.repository }}/total?label=Total%20Downloads)
          
          **Release Page:** [View all releases and changelogs](${REPO_URL}/releases)
          
          ---
          EOF
          
      - name: Update README files
        run: |
          # Function to update a README file
          update_readme() {
            local README_PATH="$1"

            if [ ! -f "$README_PATH" ]; then
              echo "⚠️  README not found: $README_PATH"
              return
            fi

            # Update or add download section
            if grep -q "<!-- DOWNLOAD_SECTION_START -->" "$README_PATH" && grep -q "<!-- DOWNLOAD_SECTION_END -->" "$README_PATH"; then
              echo "🔄 Updating existing download section in $README_PATH..."
              awk '
                /<!-- DOWNLOAD_SECTION_START -->/ {
                  print $0
                  print ""
                  system("cat download_section.md")
                  while (getline > 0 && !/<!-- DOWNLOAD_SECTION_END -->/) continue
                  print "<!-- DOWNLOAD_SECTION_END -->"
                  next
                }
                { print }
              ' "$README_PATH" > temp_readme.md
              mv temp_readme.md "$README_PATH"
            else
              echo "➕ Adding new download section to $README_PATH..."
              if grep -q "^# " "$README_PATH"; then
                awk '
                  /^# / && !inserted {
                    print $0
                    print ""
                    print "<!-- DOWNLOAD_SECTION_START -->"
                    print ""
                    system("cat download_section.md")
                    print ""
                    print "<!-- DOWNLOAD_SECTION_END -->"
                    print ""
                    inserted = 1
                    next
                  }
                  { print }
                ' "$README_PATH" > temp_readme.md
                mv temp_readme.md "$README_PATH"
              fi
            fi
          }

          # Update both README files
          update_readme "README.md"
          update_readme "fincept-terminal-desktop/README.md"

          rm -f download_section.md
          
      - name: Commit and push README changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"

          # Add both README files
          git add README.md fincept-terminal-desktop/README.md

          if git diff --cached --quiet; then
            echo "ℹ️  No changes to commit"
          else
            git commit -m "🚀 Auto-update direct download links for v${{ steps.get_version.outputs.version }}

            ✨ Added direct download links for:
            - macOS (ARM64 & x64) 
            - Linux (AppImage & .deb)
            - Windows (x64)
            
            📦 Release: ${{ steps.create_release.outputs.tag_name }}
            🔗 All downloads are now one-click with no GitHub login required!"
            
            # Push with retries
            for i in {1..5}; do
              if git push; then
                echo "✅ Successfully pushed README updates"
                break
              else
                echo "⚠️  Push failed, attempt $i/5"
                if [ $i -lt 5 ]; then
                  echo "🔄 Pulling latest changes and retrying..."
                  git pull --rebase origin main
                  sleep $((i * 2))
                else
                  echo "❌ Failed to push README after 5 attempts"
                  exit 1
                fi
              fi
            done
          fi